Do the basic setup and create an app named website and add this app in the settings.py file.
Then we will be using mysql in this project, so install mysql, connector and connector-python (which are used to connect).

	pip install mysql
	pip install mysql-connector
	pip install mysql-connector-python

This requires mysql to be downloaded on your computer.

In the settings.py file, set the database as mysql.

	DATABASES = {
    	    'default': {
        	'ENGINE': 'django.db.backends.mysql',
        	'NAME': 'crm_project',
        	'USER': 'root',
        	'PASSWORD' : '@4521TRS',
        	'HOST' : 'localhost',
        	'PORT' : '3306',
    		}
	}
Now we need to setup the database that we have just designated.
So in the main project file, we can create a file named mydb.py ( there are other ways to do it also. ) 

In the mydb.py file, firstly import the mysql connector as
  
        import mysql-connector

then we need to create a database connection and for that we will create a variable called as dataBase and we will use connect function in in and inside of that, we will mention host, user and password ( as a convention passwd is used for password ).


    dataBase = mysql.connector.connect(
        host = 'localhost',
        user = 'root',
        passwd = '@4521TRS'
    )

So now, we wanna prepare a cursor object.

---------------
NOTE :- A cursor object allows python code to execute the sql commands in a database session. Actually cursor object is a pointer, it will point to the result. Firstly, we will connect our script to the database and then we will run the SQL query from the python script and the cursor object is responsible to make this SQL query run. Cursor object is an object of Cursor class.
---------------

For this we will create a variable named cursorObject and we will set that to dataBase.cursor()  (this dataBase is the variable that we have just created).

     cursorObject = dataBase.cursor()

We also now need to create the database. We can do that by just calling the cursorObject variable that we have just created. WE will use execute for that and in there we will write the SQL command that we write for creating a database (The name of the database will be the same as we have mentioned in the settings.py file).

Now we can print a message for the terminal

     print("All done !!")

We only need this file right now one time just to setup this database. But if you know how to setup a database from the terminal, you can do that also or you can go to mysql workbench and do it from there. You can do it whatever way you like but this way is super easy.

Now let's run this file from the terminal

     python mydb.py

And you can see the message that we have written in the file which means that the file has executed perfectly and you can confirm that our database has been created by browsing the mysql workbench.

Now we can run the migrate command to confirm that we are ready to go (if that works fine).

     python manage.py migrate

The last thing we are gonna do in this section is create a superuser.

     python manage.py createsuperuser


Now we can run our server and see if it all works.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Now create a new project in the github and add this project as remote ans commit all the changes.

From the settings.py file in the github, we can see the database passwords. But it is ok untill and unless, you are professionally working on a project.

------------------------------------------------------------------------------------------------------------------------------------------------------------

We can now delete the mydb.py file if we want, we don't need it anymore.

------------------------------------------------------------------------------------------------------------------------------------------------------------

INITIAL APP BUILDING

Now we will head on to building out our app.

So firstly in the urls.py file of the main project, include the urls of the app (i.e, website)

	path('', include('website.urls'))

Until now, we don't have any urls file in our app. So we will create it and paste the basic structure.
Now let's create a url for the homepage. 
So anytime you wanna create a django webpage, there is always a three step process. You create the actual template file ( the html page ), you also create a url and you create a view.

So let's create a url for the homepage.

        path('', views.home, name='home'),

We need to import the views file also to make it work.

       from . import views

Now let's head over to our views file and create a view for our homepage and for now, we are just rendering out the home.html file (we don't have it until now) and passing the empty context dictionary.

      def home(request):
            return render(request, 'home.html', {})

Now we need to create this home.html file, so let's head over to our website directory and create a new folder named tempalates. Django knows to look for all our webpage files in the tempalates folder. In that folder, we will create a file called home.html.

In there, we will write a sample text just to make sure it is working.
So boom, now our webpage is working.

Now let's setup the base.html file and a base.html file is the file that every webpage on your site will reference.

So create a base.html in the templates folder and inside of this, we will put all the code that is gonna go on every page. So the code we are gonna use for our styling is something called bootstrap css framework. So we will go to the bootstrap website and take the template which contain both the css and js and just paste all of this in the base.html

Let's change the title to Django CRM and in the body, we will remove the h1 tag and we will create a template for the content block. What this will do is, it will pull everything out of our webpage (in our case Hello World)
So what django does internally is, it pulls everything out, put it in the content tag.
So to give permission to the base.html file, we can extend the home.html with the base.html file.

      {% extends 'base.html' %}
 
And here we need to do one more thins which is wrapping all the content in the same block content tag, so that django can take it from here and put it inside of the content tag in the base.html file.

We can also wrap the content tag in the base.html file with the div which has the class container. Now if we save this and go back to the browser, we can see that it shifted it a little bit inside. We can also add a line break tag just to create some space from the top.

Now let's move on and create the navbar.
Go to the templates directory and create a file named as navbar.html and we are gonna grab that from bootstrap because it is super easy and just paste that in.
Now we need to add this to out base.html file, so we file go to that and just under the body we will use the django tag to add this and this time we will use the include tag and include the navbar.html

     {% include 'navbar.html' %}

Now the next thing is modifying this navbar.
So in the navbar class, you can see the 'bg-body-tertiary', remove that and add 'navbar-dark bg-dark'. So this will change it from light to dark.

Next we will modify the a tag, so we will change it to the DJANGO CRM which will point to the homepage

Now we can remove the unwanted items from the navbar.

Now we have got a homepage and a navbar, the next we will add the ability to register as new user, login and logout.

So I think we will look out for logging in and logging out first and then we will do registration which a bit more complicated. Logging in and logging out is relatively simple because we will be using the django authentication system. This comes up with and it will do all of the heavy lifting for you. It will take care of logging people in, logging people out, keeping track of who is who and what is what and it is really easy to setup and use. So we are gonna use that now.

----------------------------------------------------------------------------------------------------------------------------------

DJANGO LOGIN USERS

So let's head back to our views.py file and firstly we will import the django authentication system.

     from django.contrib.auth import authenticate, login, logout

After we add this, we want the ability for django to flash up little messages on the screen. So when somebody logs in, we want to flash up a little message like ' You have successfully logged in.' and the same for log out and register. So when will import this also

     from django.contrib import messages

So we have already got a superuser, we don't need to register this again. So now what we want is, we want the users to login from the homepage not from the backend like we did when we setup the superuser.

So what we need here is a couple of new views, so I am gonna define a view for the login which is login_user and for now we are just gonna say 'pass' 

    def login_user(request):
        pass

    def logout_user(request):
        pass

We have got these views but we also need url because we had discussed that it is always a three step process. So we will create a url for both of these.

    path('login/', views.login_user, name='login'),
    path('logout/', views.logout_user, name='logout'),

The reason why we are calling these login_user & logout_user and not the login & logout because we have imported login & logout which are function that will run, so our views cannot be named these because it will be a matter of conflict.

So we have created this login_user view/function and if you want a separate login page, you need that but we are just gonna add this to our homepage. So what we want to happen is if somebody comes to the homepage and if they are not already logged in, we will flash up a form which says 'login' and if they are logged in, we just wanna show the CRM but we do not want to show this if you are not logged in, so we will do this all on the homepage.

So before working with the home view, let's head to home.html and add a form just to see what we are looking at here. So we will center this form in the middle of the screen and for that we will use this div which is completely bootstrap.

    <div class="col-md-6 offset-md-3">

    </div>

Wrap the sample text that we had written in this.
And for now we will comment the login_user url because we have removed the login_user view as we will use in with the home view.

Now let's start building the form, so there are couple of ways to create forms in django, we can use the forms.py file and we can also handcode it. And we will handcode this for now. Now we will get rid of the sample text and create a form in there.

So this form will be a POST method form and the action will send it to home and in that first we will add the csrf token and for creating the actual form we will use the bootstrap again and get a form from there.

Now we will do some modifications in the form as per the requirements.

We need these fields (username and password) to be required, so we will just add 'required' in the input tag.

So we have created this form but it doesn't do anything and we want to show only when the user is not logged in. So how do we determine if a user is logged in or not. For this, we will add this a tag an wrap this inside of that. So basically it will be like, if you are logged in, it will show a sample text ( for now ) and if you are not then it will show this form.

Now if we go and reload in the browser, you will not see anything but if you go to the admin page, you login and then come back here again and you will see that there is no login form.

For now it just shows the form, doesn't do anything but we will fix this.


    {% if user.is_authenticated %}

    <h1>Hello World</h1>

    {% else %}

    <h1>Login</h1>
    <br>
    <form method="POST" action="{% url 'home' %}">
        {% csrf_token %}
        <div class="mb-3">
            <input type="text" class="form-control" name="username" placeholder="Username" required>
        </div>
        <div class="mb-3">
            <input type="password" class="form-control" name="password" placeholder="Password" required>
        </div>
        <br>
        <button type="submit" class="btn btn-secondary">Login</button>
    </form>

    {% endif %}

So for this, head back to the views.py file and let's write some logic in the home view.

Firstly we will check if the person is logging in, so if the person is logging in, they are POSTing otherwise they are just going to the webpage and in that case they are just GETting ( getting the request ).

So we will check if the request method is POST and if that is, they are filling out the form. So we wil just grab whatever they submit in the form. 

We have only two things to take which is username and the password. So to get the password, we will create a variable called as username which will take the username and we can call the username by the name because we have set the name in the input tag and we will do the same for the password also. So what this will do is, it will check the POST request for the username and save it in the username variable and password in the password variable.

So now as we have their username and the password. After this, we will again do some login and check if the user who is trying to log in is real or not i.e, their username and password are correct or not.
For this we will create a variable called user and in there, we will use the authenticate method and in that, we will pass the request, set the username to the username and the password to the password. 

Now let's run some logic and check if everything looks good. And now if you everything goes fine, then they will be just logged in and then we will just send a success message and then we will simply redirect them to the homepage ( import the redirect first ) and in the else which is when an error occurs, we will show a message.

And if they are not POSTing, we will send them back to the homepage.

    def home(request):
    # Check to see if logging in
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        
        # Authenticate
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            messages.success("You are successfully logged in.")
            return redirect('home')
        else:
            messages.error(request,"There was an error logging in, please login again.")
            return redirect('home')
        
    else:
        return render(request, 'home.html', {})

So now if we enter some shit in login form, we are supposed to get an error but we will not get any error for now because we need to add this in our base.html file. So head back to our base.html file and write some logic for showing the messages.

The logic is, check for the messages and if there are then show them.
    
    {% if messages %}

        {% for message in messages %}
        {{ message }}
        {% endfor %}

     {% endif %}


These messages does not look good on the homepage, we want to format this. Let's head back over to the bootstrap and we will go to componenets -> alerts and from there let's copy the required code for the alert. We will put it where we have printed the message and then we will remove the prewritten message from the copied code and paste out message. So now our message will come with the styling.

So now we have completed the login process.

--------------------------------------------------------------------------------------------------------------------------------------------------

Let's now start working on the logout.

So firstly, we will go to the urls file and uncomment the logout path but not the login path because we are not creating the separate page for that.

Now let's head back over to the views and start working on the logout view.
Building logout is a lot easier than the logout page and to do that, we will simply call the logout function that we had previously imported and then pass in the request.

Now that's all we really need but we should probably make this look nicer. So let's give this a little message.

    def logout_user(request):
         logout(request)
         messages.success(request, "You have been logged out !!")
         return redirect('home')

Now we need to add the link for this in the navbar, so let's head over to this.
We only want the logout link to appear, if a user is logged in.

So we will apply some logic in the link just like,

    {% if user.is_authenticated %}
           <li class="nav-item">
               <a class="nav-link" href="{% url 'logout' %}">Logout</a>
           </li>
    {% else %}
           <li class="nav-item">
                <a class="nav-link" href="{% url 'home' %}">Login</a>
           </li>
     {% endif %}


If a user is logged in, it will show a logout link and it will point to the logout and if the user is not logged in, then it will show the login link and it will point to the home page, then the home page login will be applied.

Now the logout is done, we will now move on to register.

---------------------------------------------------------------------------------------------------------------------------------------------------

Registering is a little bit more difficult and we are gonna use a django form to handle that for us.
With logging in, we built the form ourselves by hand and it is fine when it is basic like the login but the registration form is gonna be more complicated because we wanna be able to do some logic things such as if they type in the password that doesn't follow the password rules, we need to make sure of that. We will make the users enter the password twice when they are registering. So the user enters the password then he needs to enter the password again just to make sure that the two matches. So that is a bit more complicated that the simple login form.

So we are gonna create a django form  for that and it will take care of all for us.
This is gonna be more copying and pasting because it is a lot of code.

So let's start doing that.

You may not want to build this registration thing if you do not want the project to be public. You can simply go to the admin panel and add users manually from there.
But if you want people to sign up on there own then you have to build the registration form.

So let's head over to our page and create our registration page.

Let's create the url first.

    path('register/', views.register_user, name='register'),

Next head back to the views.py file and create a view for the registration (register_user) and we will render the register page whenever someone hits this url.

Now head over to the templates directory and create a file named register.html.
And in there, firstly extend the base.html and then create a block content. 
We will also add a link to this in the navbar.

So if a user is authenticated which means the user is already logged in then we do not want him to register, so this should go in the else block and it will point to the register page.

    <li class="nav-item">
        <a class="nav-link" href="{% url 'register' %}">Register</a>
    </li>


Now as we have discussed before, we will be using the django forms for this, we will not be handcoding this.
So in our app's base directory, we will create a file named forms.py and in this we need to import a few things which includes the UserCreationForm (it helps us create users), the user model and the form.

    from django.contrib.auth.forms import UserCreationForm
    from django.contrib.auth.models import User
    from django import forms


and in this only create a class named SignUpForm which will inherit from the UserCreationForm. We can use this form directly but we will modify it a little bit.

So what we want is to grab is people's first name, last name and their email address.
So let's define the variables for all these three. We also want username and password but we will do it separately.

We will define an EmailField() for the email and CharField() for first_name and last_name. In these, we are gonna give a label of nothing because we are gonna use the placeholder tags.
And in the email, we are gonna give this a widget of text input and that will basically say that the form field shows up on the screen is a text input screen ( just a textbox basically) and in this TextInput() we are gonna pass the attributes ( attr ) and this will allow us to pass different attributes on the page to style our form.
We are gonna be using bootstrap to style our forms and bootstrap requires a class of form control, so we can designate that right here.

So we will declare the class as form control inside of the attributes dictionary and after that we will declare the placeholder.

And in the first name after the label, we are gonna give the max_length of 100, and then  copy paste the widget section from the email but change the placeholder.
Now repeat the same thing for the last_name variable.

Now all this looks good but we will also give this a meta class and in there we will specify the model which is the user model and the fields also which are these three fields, we also wanna designate the username, password 1 and password 2

    class SignUpForm(UserCreationForm):
        email = forms.EmailField(label="", widget = forms.TextInput(attrs={'class':'form-control', 'placeholder':'Email Address'}))
        first_name = forms.CharField(label="", max_length=100, widget = forms.TextInput(attrs={'class':'form-control', 'placeholder':'First Name'}))
        last_name = forms.CharField(label="", max_length=100, widget = forms.TextInput(attrs={'class':'form-control', 'placeholder':'Last Name'}))

        class Meta:
            model = User
            fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2')

Django expect the password1 and password2 to be same.

So we are half way done now.

Now we need to copy and paste a few more things and we will create an init function, in there we will do the same things we did above for our username, password1 and our password2 and that just allows us to add whatever we want. ( copy and paste this section from the github link ).

As we have got this stuff, we need to put this stuff on the webpage.

So now head back over to our views.py file, and we need to import that form that we have created.

Firstly import the form.

    from .forms import SignUpForm

Now go over to the RegisterUser() view. So like our login, when somebody fills out the form, they are going to be POSTing it so just copy paste this and in there, we will create a variable as form and pass in the SignUpForm() and then just pass the POST request. So we are basically saying that whatever the user fills out in the form, just send it over to our SignUpForm and we will save it in our form variable. 
Now after this, first we need to check if what the user typed in is valid. So if the form is valid, just save it.

So now that the form has been saved, the person who registers for the form is registering because they want to use the site. So let's log them in right now.
So let's grab their username and we will use the cleaned_data method from the form to get the username entered in the form and we also want the same for the passwiord also but we will extract the password1 because on the page it will be password1.

So once we have their username and password, we can try to authenticate them.

So once this authentication is done, we can log them in. And then at last, we will give a success message.
Then we have to redirect them somewhere, so we will send them to the home page.


    def register_user(request):
        if request.method == 'POST':
            form = SignUpForm(request.POST)
            if form.is_valid():
                form.save()
                # authenticate and login
                username = form.cleaned_data['username']
                password = form.cleaned_data['password1']
                user = authenticate(username=username, password = password)
                login(request, user)
                messages.success(request, "You have successfully registered !!")
                return redirect('home')
     return render(request, 'register.html', {})

So again, it is if they are filling out the form, if they are POSTing and if they are not it means they are going to the website.
So we will do that in the else condition, we still need that form but this time we will not pass the POST request because they haven't filled out the form. They are just going to the page, they want to fill the form but they have not done yet. So we do need to pass this form to the page, so we could shift this return statement inside of the else condition and pass in the form in the context dictionary.

    def register_user(request):
        if request.method == 'POST':
            form = SignUpForm(request.POST)
            if form.is_valid():
                form.save()
                # authenticate and login
                username = form.cleaned_data['username']
                password = form.cleaned_data['password1']
                user = authenticate(username=username, password = password)
                login(request, user)
                messages.success(request, "You have successfully registered !!")
                return redirect('home')
        else:
            form = SignUpForm()
            return render(request, 'register.html', {'form':form})

        return render(request, 'register.html', {'form':form})



You can see the difference in the code.

So this will pass the form into the webpage (our register.html page ) and then we can do something with it.

Let's head backover to our regsiter.html file and in here firstly we will grab the div that we have added on the homepage and we have to grab some more items from the homepage.

After all this, we need to add the actual form and to do that, we will just type form.as_p in the tag

       {{ form.as_p }}

Now if we refresh, we can see the register form.

Now we will add some more code above the tag for the form errors.

    <div class="alert alert-warning alert-dismissible fade show" role="alert">
         Your form has some errors.
         {% for field in forms %}
         {% if fields.errors %}
         {{field.errors}}
         {% endif %}
         {% endfor %}
         <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
     </div>

So if your form has errors, it says "Your form has errors" and then it loops through the errors and it quits out whatever the error is.

NOTE :- This is case-sensitive so you have to write the first letter in capital.


So whenever you have any error, you can see that because this above code is in action.

This is it for the registration section. We can now move ahead to the next section.


-------------------------------------------------------------------------------------------------------------------------------------------------------------










